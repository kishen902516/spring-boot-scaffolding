package ${PACKAGE}.contract.provider;

import au.com.dius.pact.provider.junit5.HttpTestTarget;
import au.com.dius.pact.provider.junit5.PactVerificationContext;
import au.com.dius.pact.provider.junit5.PactVerificationInvocationContextProvider;
import au.com.dius.pact.provider.junitsupport.Provider;
import au.com.dius.pact.provider.junitsupport.State;
import au.com.dius.pact.provider.junitsupport.loader.PactBroker;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.TestTemplate;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.test.context.ActiveProfiles;

/**
 * Provider contract tests using Pact.
 *
 * <p>Verifies that this service (provider) satisfies the contracts
 * defined by consumer services.
 *
 * <p>Contracts are fetched from Pact Broker and verified against
 * the running service.
 */
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
@Provider("${SERVICE_NAME}")
@PactBroker(host = "${pact.broker.host:localhost}", port = "${pact.broker.port:9292}")
class ${ENTITY}ProviderContractTest {

  @LocalServerPort
  private int port;

  @BeforeEach
  void setup(PactVerificationContext context) {
    context.setTarget(new HttpTestTarget("localhost", port));
  }

  @TestTemplate
  @ExtendWith(PactVerificationInvocationContextProvider.class)
  void pactVerificationTest(PactVerificationContext context) {
    context.verifyInteraction();
  }

  /**
   * Provider state: ${ENTITY} exists
   *
   * <p>Sets up data so the ${ENTITY} exists when consumer requests it.
   */
  @State("${ENTITY_LOWER} exists")
  void ${ENTITY_LOWER}Exists() {
    // Setup: Create test ${ENTITY} in database
    // The consumer contract expects this ${ENTITY} to exist
  }

  /**
   * Provider state: ${ENTITY} does not exist
   *
   * <p>Ensures no ${ENTITY} exists with the given ID.
   */
  @State("${ENTITY_LOWER} does not exist")
  void ${ENTITY_LOWER}DoesNotExist() {
    // Setup: Ensure no ${ENTITY} exists
    // The consumer expects a 404 response
  }

  /**
   * Provider state: multiple ${ENTITY}s exist
   */
  @State("multiple ${ENTITY_LOWER}s exist")
  void multiple${ENTITY}sExist() {
    // Setup: Create multiple ${ENTITY}s
  }
}
