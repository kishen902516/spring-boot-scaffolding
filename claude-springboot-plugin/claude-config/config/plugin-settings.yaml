# Spring Boot CLI Claude Code Plugin Configuration

plugin:
  name: "Spring Boot CLI Plugin"
  version: "1.0.0"
  description: "Claude Code plugin for Spring Boot microservices with Clean Architecture, CQRS, and TDD"

# Path configurations
paths:
  springboot_cli: "/home/kishen90/java/springboot-cli"
  default_workspace: "${HOME}/projects"
  template_directory: "${springboot_cli}/templates"

# Development settings
development:
  # TDD enforcement
  tdd:
    enforce: true
    test_first: true
    minimum_coverage: 80
    test_pyramid:
      unit: 75
      integration: 20
      e2e: 5

  # Architecture rules
  architecture:
    style: "clean"
    patterns:
      - "cqrs"
      - "domain-driven-design"
      - "hexagonal"
    enforce_rules:
      - "no_domain_contamination"
      - "dependency_inversion"
      - "single_responsibility"
      - "interface_segregation"

  # Java settings
  java:
    version: 21
    features:
      records: true
      pattern_matching: true
      virtual_threads: true
      sealed_classes: true
      text_blocks: true
    style_guide: "google-java-format"

# Database configurations
databases:
  mongodb:
    testcontainer: "mongo:6.0"
    default_port: 27017
  mssql:
    testcontainer: "mcr.microsoft.com/mssql/server:2022-latest"
    default_port: 1433

# External services
external_services:
  resilience_patterns:
    circuit_breaker:
      enabled: true
      failure_threshold: 50
      wait_duration: 60000
      sliding_window_size: 100
    retry:
      enabled: true
      max_attempts: 3
      wait_duration: 1000
      exponential_backoff: true
    rate_limiter:
      enabled: true
      limit_for_period: 100
      limit_refresh_period: 1000
    bulkhead:
      enabled: false
      max_concurrent_calls: 25
      max_wait_duration: 0

# Observability settings
observability:
  application_insights:
    enabled: true
    instrumentation_key: "${APPLICATIONINSIGHTS_INSTRUMENTATION_KEY}"
    sample_rate: 1.0
    track_dependencies: true
    track_exceptions: true
    track_metrics: true
    track_events: true

  logging:
    level:
      root: "INFO"
      application: "DEBUG"
      infrastructure: "INFO"
      domain: "WARN"
    structured: true
    format: "json"

# Security settings
security:
  oauth2:
    enabled: true
    provider: "azure-ad"
    scopes:
      - "api://default"
  jwt:
    enabled: true
    expiration: 3600
    refresh_token_expiration: 86400
  secrets_management:
    provider: "azure-keyvault"
    scan_for_hardcoded: true

# Testing configuration
testing:
  unit:
    framework: "junit5"
    mocking: "mockito"
    assertions: "assertj"
  integration:
    use_testcontainers: true
    use_wiremock: true
    parallel_execution: false
  architecture:
    framework: "archunit"
    rules_package: "com.example.archunit"
  e2e:
    framework: "rest-assured"
    base_url: "${E2E_BASE_URL:http://localhost:8080}"
    timeout: 30000
  coverage:
    tool: "jacoco"
    minimum_line_coverage: 80
    minimum_branch_coverage: 70
    exclude_packages:
      - "*.config"
      - "*.dto"
      - "*.exception"
  mutation:
    tool: "pitest"
    target_coverage: 70
    timeout_constant: 4000

# Git configuration
git:
  branch_naming:
    feature: "feature/{ticket-id}-{description}"
    bugfix: "bugfix/{ticket-id}-{description}"
    hotfix: "hotfix/{ticket-id}-{description}"
    release: "release/{version}"
  commit_convention: "conventional"
  hooks:
    pre_commit: true
    pre_push: true
    commit_msg: true

# GitHub integration
github:
  organization: "${GITHUB_ORG}"
  project_board:
    enabled: true
    columns:
      - "Backlog"
      - "In Progress"
      - "In Review"
      - "Done"
  pr_template: true
  issue_templates:
    - "bug_report"
    - "feature_request"
    - "task"
  auto_link_issues: true
  require_pr_review: true
  delete_branch_on_merge: true

# CI/CD settings
ci_cd:
  provider: "github-actions"
  stages:
    - name: "build"
      run: "mvn clean compile"
    - name: "test"
      run: "mvn test"
    - name: "coverage"
      run: "mvn jacoco:report jacoco:check"
    - name: "security"
      run: "mvn dependency-check:check"
    - name: "package"
      run: "mvn package"
    - name: "docker"
      run: "docker build -t ${IMAGE_NAME}:${VERSION} ."
  quality_gates:
    coverage: 80
    duplications: 3
    code_smells: 0
    vulnerabilities: 0

# Feature flags
feature_flags:
  event_sourcing: false
  camel_integration: false
  graphql_api: false
  grpc_api: false
  kubernetes_deployment: true
  service_mesh: false

# Agent behavior
agent_behavior:
  auto_validate_architecture: true
  auto_generate_tests: true
  auto_update_documentation: false
  suggest_refactoring: true
  enforce_tdd: true
  max_file_size: 500  # lines
  max_method_size: 30  # lines
  max_class_complexity: 10

# Performance settings
performance:
  virtual_threads:
    enabled: true
    executor_type: "virtual"
  caching:
    provider: "redis"
    default_ttl: 3600
  database:
    connection_pool_size: 10
    query_timeout: 5000
  api:
    rate_limiting: true
    throttling: true
    request_timeout: 30000

# Documentation
documentation:
  generate_api_docs: true
  generate_architecture_docs: true
  generate_readme: true
  format: "markdown"
  include_diagrams: true
  diagrams_format: "plantuml"

# Monitoring and alerts
monitoring:
  health_checks:
    enabled: true
    endpoints:
      - "/health"
      - "/health/liveness"
      - "/health/readiness"
  metrics:
    enabled: true
    provider: "micrometer"
    export_to: "application-insights"
  alerts:
    enabled: true
    channels:
      - "email"
      - "slack"
    rules:
      - error_rate: 5
      - response_time: 2000
      - availability: 99.9

# Environment configurations
environments:
  local:
    profile: "local"
    debug: true
    mock_external_services: true
  development:
    profile: "dev"
    debug: true
    mock_external_services: false
  staging:
    profile: "staging"
    debug: false
    mock_external_services: false
  production:
    profile: "prod"
    debug: false
    mock_external_services: false